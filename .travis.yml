sudo: required

language: python

services:
  - docker
  
notifications:
  slack: ubert:ubftPRHQKkFNs1HQmHl1px91

env:
  DOCKER_COMPOSE_VERSION: 1.5.0
  DOCKERHUB_IMAGE_NAME: civicresourcegroup/civic

before_install:

# Install docker-compose
  - sudo rm /usr/local/bin/docker-compose
  - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
  - chmod +x docker-compose
  - sudo mv docker-compose /usr/local/bin
#### end of docker-compose installation
  - docker pull civicubertree/civic-container:branch-master
  - docker login -e="$DOCKER_EMAIL" -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"

install:

# Clone and setup civic-app
  - git clone $(cat civic-app-version.txt) https://$GH_TOKEN@github.com/civicresourcegroup/civic-app.git
  - cd civic-app
  - cp ../frontend.json config/frontend.json
  - cp ../backend.json config/backend.json
  - BUILD_NUMBER=$TRAVIS_BUILD_NUMBER envsubst < ../local_config.json > config/local_config.json
  - cp docker-compose.build.yml docker-compose.override.yml
###

# Run db in advance to make it ready for migrate step
  - docker-compose up -d db

# Download backend repositories
  - make clone-backend-app
  - cp ../local_settings.py backend/civic-container/app/civic/settings/local_settings.py
  - mkdir backend/addons
  - make clone-backend-addons
##########

# Download and build frontend
  - make clone-frontend-app
  - mkdir -p frontend/civic-app-admin/dist/components
  - make clone-frontend-addons
  - make bind-frontend-by-copy
  - make build-frontend
##############


# Build docker images
  - sudo docker-compose build

before_script:

  - docker-compose up -d elasticsearch
  - docker-compose up -d rabbitmq

# wait until db is ready
  - source ./deploy_scripts/wait_for_db.sh

# run preparations db-migrations
  - docker-compose run --entrypoint "/bin/bash -c" backend "cd app && ./manage.py migrate --noinput"
  - docker-compose run --entrypoint "/bin/bash -c" backend "cd app && ./manage.py collectstatic --noinput"
  - docker-compose run --entrypoint "/bin/bash -c" backend "cd app && ./manage.py populate_base --force-count=1 --no-images"

script:
# run backend tests
  - docker-compose run --entrypoint "/bin/bash -c" backend "make -C /home/civic/app test"
# run e2e tests
  - docker-compose up -d backend
  - docker-compose up -d civic
  - make test-frontend

after_failure:

# define built image names:
  - export BACKEND_IMAGE=$DOCKERHUB_IMAGE_NAME:backend-travisbuild-$TRAVIS_BUILD_NUMBER
  - export CIVIC_IMAGE=$DOCKERHUB_IMAGE_NAME:civic-travisbuild-$TRAVIS_BUILD_NUMBER

# Push docker images to registry
  - docker tag civicapp_backend $BACKEND_IMAGE
  - docker tag civicapp_civic $CIVIC_IMAGE
  - docker push $BACKEND_IMAGE
  - docker push $CIVIC_IMAGE

after_success:

# define built images names:
  - export BACKEND_IMAGE=$DOCKERHUB_IMAGE_NAME:backend-travisbuild-$TRAVIS_BUILD_NUMBER
  - export CIVIC_IMAGE=$DOCKERHUB_IMAGE_NAME:civic-travisbuild-$TRAVIS_BUILD_NUMBER

# Push docker images to registry

  - docker tag civicapp_backend $BACKEND_IMAGE
  - docker tag civicapp_civic $CIVIC_IMAGE
  - docker push $BACKEND_IMAGE
  - docker push $CIVIC_IMAGE

# deploy on the server
  - cd config/servers
  - if [[ "$TRAVIS_BRANCH" == "master" ]]; then echo "Deploy to ci " && source ci.sh ; elif [[ "$TRAVIS_BRANCH" == "dev" ]]; then echo "Deploy to dev" && source dev.sh ; else echo "Deploy skipped" ; fi
  - cd ../../deploy_scripts/ci
  - cat change_images_on_server.sh | envsubst | ssh target
